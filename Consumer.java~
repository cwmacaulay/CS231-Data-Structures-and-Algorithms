/* Consumer.java
 * Charles Macaulay
 * October 16, 2014
 */


import java.util.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;


class Consumer extends Cell {
  
  public  double rightedge;
  public  double bottomedge;
  
  Consumer(double x, double y) { 
    super( x, y);
    this.xPos = x;
    this.yPos = y;
    this.identifier = 2;
    this.mortality = 10000;
    double rightedge = (x + 20);
    double bottomedge = (x + 20);
  }
  
  
  
  
  public boolean isNeighbor(Cell cell) {
    double x0 = cell.getX();
    double y0 = cell.getY();
    double x_dis = Math.pow((this.xPos - x0),2);
    double y_dis = Math.pow((this.yPos - y0),2);
    double distance = Math.pow((x_dis+ y_dis), 0.5);
    
    if (distance < 50 && cell.mortality > 0 ){
      return true;
    }
    else {return false;}
  }
  
  
  
  
  public boolean contact( Cell cell) {
    double x0 = cell.getX();
    double y0 = cell.getY();
    double x_dis = Math.pow((this.xPos - x0),2);
    double y_dis = Math.pow((this.yPos - y0),2);
    double distance = Math.pow((x_dis+ y_dis), 0.5);
    
    double xR = rightedge;
    double y01 = cell.getY();
    double x_disR = Math.pow((this.xPos - xR),2);
    double y_dis1 = Math.pow((this.yPos - y01),2);
    double rdistance = Math.pow((x_disR + y_dis1), 0.5);
    
    double xRb = rightedge;
    double yB = bottomedge;
    double x_disRb = Math.pow((this.xPos - xRb),2);
    double y_disB = Math.pow((this.yPos - yB),2);
    double rBdistance = Math.pow((x_disRb + y_disB), 0.5);
    
    
    if (distance <9 ||rdistance < 9 || rBdistance <9 && cell.mortality > 0 ){
      return true;
    }
    else {return false;}
  }
  
  
  
  
  public void updateState( Landscape ls ) {
    
    ArrayList<Cell> neighbors = ls. getNeighbors( this );
    ArrayList<Cell> food_neighbors = ls.foodNeighbors( this );
    ArrayList<Cell> o_neighbors = ls.oNeighbors( this );
    Random gen = new Random();
    
    double xp = this.xPos;
    double yp = this.yPos;
    
    
    if (o_neighbors.size() > 0){
      for (Cell c : o_neighbors){
        if ( this.contact(c)==true ){
          ls.removeAgent(this);
        } 
      }
    }
    
    if (this.mortality < 1 ){
      ls.removeAgent( this );
    }
    
    
    if (food_neighbors.size() >0 ) {
      for( Cell c : food_neighbors){
        if (this.contact(c) == true){
          this.mortality++;
          //ls.removeAgent(c);
        }
      }
      double xl = food_neighbors.get( 0 ).getX();
      double yl = food_neighbors.get( 0 ).getY();
      if (xl > this.xPos){
        if (o_neighbors.size() < 1){
          this.xPos += (xl-this.xPos)/4;
        }else {
          double moveto = (this.xPos + (xl-this.xPos)/4);
          if (moveto < o_neighbors.get( 0 ).getX() || moveto > (o_neighbors.get( 0 ).getX() - ls.obs_width)) {
            this.xPos = moveto;
          } else { this.xPos -= (this.xPos- xl)/4; }
        }
      } else {
        if (o_neighbors.size() < 1){
          this.xPos -= (this.xPos- xl)/4;
        }else {
          double moveto = (this.xPos + (xl+this.xPos)/4);
          if (moveto < o_neighbors.get( 0 ).getX() || moveto > (o_neighbors.get( 0 ).getX() - ls.obs_width)) {
            this.xPos = moveto;
          } else { this.xPos += (xl-this.xPos)/4; }
        }
      }
      
      if (yl > this.yPos){
        if (o_neighbors.size() < 1){
          this.yPos += (yl-this.yPos)/4;
        } else {
          double movetoY = (this.yPos + (yl+this.yPos)/4);
          if (movetoY < o_neighbors.get( 0 ).getY() || movetoY > (o_neighbors.get( 0 ).getY() + ls.obs_height)) {
            this.yPos = movetoY;
          } else { this.yPos -= movetoY; }
        }
      } else {
        if (o_neighbors.size() < 1){
          this.yPos -= (this.yPos - yl)/4;
        } else {
          double movetoY = (this.yPos - (yl-this.yPos)/4);
          if (movetoY < o_neighbors.get( 0 ).getY() || movetoY > (o_neighbors.get( 0 ).getY() + ls.obs_height)) {
            this.yPos = movetoY;
          } else { this.yPos += movetoY; }
        }
      }
    
      if( (gen.nextDouble()* 10.0) > 9.9  && food_neighbors.size() > 5){
        double near_x_pos = (xp + ((gen.nextDouble() - .5)  * 200));
        double near_y_pos = (yp + ((gen.nextDouble() - .5)  * 200));
        ls.addAgent( new Consumer( near_x_pos, near_y_pos ));
      }
    }
    else {
      this.mortality --;
      double movex = this.xPos + ((gen.nextFloat() - .5)*30);
      if (o_neighbors.size() < 1) {
        this.xPos = movex;
      } else if (movex < o_neighbors.get( 0 ).getX() || movex > (o_neighbors.get( 0 ).getX() - ls.obs_width)) {
         this.xPos = movex;
       } else { ls.removeAgent(this);}
      double movey = this.yPos + ((gen.nextFloat() - .5)*30);
      if (o_neighbors.size() <1) {
        this.yPos = movey;
      } else if (movey < o_neighbors.get( 0 ).getY() || movey > (o_neighbors.get( 0 ).getY() + ls.obs_height)) {
        this.yPos = movey;
      } else { ls.removeAgent(this);}
    }
  }
  
  
  public void draw(Graphics g, int x0, int y0, int scale) {
    int x = x0 + (int)(xPos * scale);
    int y = y0 + (int)(yPos * scale);
    Graphics2D g2 = (Graphics2D) g;
    Image img1 = Toolkit.getDefaultToolkit().getImage("W44614.jpg");
    g2.drawImage(img1, x, y, 20*scale, 20*scale, null);
    g2.finalize();
    
    
    return;
  }
  
  public String toString(){
    return " ð " ;
  }
  
  
}